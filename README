ACLTOOL

  This is a tool to manage ACLs - listing, creating, editing, searching, stripping, sorting
  and removing redundant entries and more.

AUTHOR

  Peter Eriksson <pen@lysator.liu.se>


OPERATING SYSTEMS SUPPORTED (for now)

  - FreeBSD (ZFS & NFSv4)
  - Solaris (tested on OmniOS, ZFS & NFSv4)
  - Linux (for NFSv4 only)


BUILD INSTRUCTIONS

  Just type 'make' in the source directory. It will automatically detect and build on:

    - FreeBSD (tested on 11.3 & 12.1)
    - Linux (tested on CentOS 7, Ubuntu 19 & Debian 9)
    - Solaris-based systems (tested on OmniOS)


USAGE

  acltool [<global-options>] [<command> [<options>] [<arguments>]]


OPTIONS

  -h / --help           -       Display usage
  -D / --debug          [<n>]   Debug level
  -v / --verbose        [<n>]   Verbosity level
  -s / --sort           -       Enable sorting
  -m / --merge          -       Enable merging
  -r / --recurse        -       Enable recursion
  -d / --depth          [<n>]   Increase/decrease max depth
  -S / --style          <s>     Select ACL print style
  -n / --no-update      -       Disable modification


COMMANDS

  exit                  [<code>]                Exit (with exit code)
  echo                  [<str>]*                Print some text
  cd                    [<path>]*               Change working directory
  pwd                   -                       Print working directory
  version               -                       Display program version
  config                [<opt>[=<val>]]*        Print/update default configuration
  help                  [<command>]*            Display usage information
  list-access           <path>+                 List ACL(s)
  strip-access          <path>+                 Strip ACL(s)
  sort-access           <path>+                 Sort ACL(s)
  copy-access           <src> <dst>+            Copy ACL(s)
  delete-access         <path>+                 Delete ACL(s)
  set-access            <acl> <path>+           Set ACL(s)
  edit-access           <path>+                 Edit ACL(s)
  find-access           <acl> <path>+           Search ACL(s)
  get-access            <var>=<path>+           Assign ACL(s) to variable(s)

  Acltool can either be used directly from the command line or by entering a CLI mode by starting 
  it without any arguments (sans any global options).

  You can access environmental variables using ${NAME} (or $N if one-character names).
  
  All commands and long option names can be abbreviated using the parts of the names. 
  Some examples of valid abbreviations:

    list-access, list-a, list, l-ac, lac, liac
    edit-access, edit-a, edit, e-ac, edac
    set-access, set-acc, set, s-a, sac

  Tab-completion in CLI mode also works for command names, long options and files.
  
  Command names may also be used in links to the "acltool" binary like "ln -s acltool lac" and
  then be used as shortcuts to the commands.
  

ACL PRINT STYLES
  default         FreeBSD-style
  verbose	  A more verbose version of FreeBSD
  brief		  A one-line version
  csv		  A CSV-styl one-line version
  solaris	  Solaris-style
  primos	  Prime/PRIMOS-style
  samba		  Samba-style
  icacls	  Windows ICACLS-style


ACL FORMAT SPECIFICATION

  ACLs used as arguments are specified as comma separated lists of ACE entries looking like:

    [<opt>]<tag>:<permissions>[:<flags>[:<type>]]

  <opt> is used by the 'edit-access' and 'find-access' commands and ignored for others:
    +      Add permission and flag bits on matching ACE entries
    -      Delete permission and flag bits on matching ACE entries
    =      Set the full permission and flag sets on matching ACE entries

    If no <opt> is specified then it works like "=" but adds a new entry in each ACL if
    none was there before. For find-access '+' and '-' only checks the specified bits on matching
    (tag & type) entries.

  <tag> tells the tag type of the ACE:
    owner@           The object "owner"
    group@           The object "group"
    everyone@        The object "other"
    [u|user]:<id>    A user name/uid
    [g|group]:<id>   A group name/gid
    <id>             A user or group (if unique)

  <permissions> Describes the rights allowed or denied.
    r / read_data         Read data
    w / write_data        Write data
    x / execute           Execute
    p / append_data       Append data
    d / delete 	          Delete
    D / delete_child      Remove files/subdirs
    a / read_attributes   Read Attributes
    A / write_attributes  Write Attributes
    R / read_xattrs	  Read Xattrs
    W / write_xattrs	  Write Xattrs
    c / read_acl	  Read ACLs
    C / write_acl	  Write ACLs
    o / write_owner	  Write Owner
    s / synchronize	  Synchronize

  <flags> Describes permission inheritance 
    f 	   File inherit
    d	   Directory inherit
    i	   Inherit only
    n	   No propagate inherit
    S	   Successful access (not used)
    F	   Failed access (not used)
    I	   Inherited (ZFS on FreeBSD only)

  <type> Describes the type of ACE entry:
    allow	   Describes rights allowed
    deny	   Describes rights denied
    audit	   Not used right now
    alarm	   Not used right now

