ACLTOOL

  This is a tool to manage ACLs - listing, creating, editing,
  searching, stripping, sorting and removing redundant entries and more.

AUTHOR

  Peter Eriksson <pen@lysator.liu.se>


OPERATING SYSTEMS SUPPORTED (for now)

  - FreeBSD (ZFS & NFSv4)
  - Solaris (tested on OmniOS, ZFS & NFSv4)
  - Linux (for NFSv4 only)


BUILD INSTRUCTIONS

  Just type 'make' in the source directory. It will automatically
  detect and build on:

    - FreeBSD (tested on 11.3 & 12.1)
    - Linux (tested on CentOS 7, Ubuntu 19 & Debian 9)
    - Solaris-based systems (tested on OmniOS)


USAGE

  See the manual page for detailed usage information.

  Acltool can either be used directly from the command line or by
  entering a CLI mode by starting it without any arguments (sans
  any global options).

  You can access environmental variables using ${NAME} (or $N if
  one-character names).
  
  All commands and long option names can be abbreviated using the
  parts of the names. Some examples of valid abbreviations:

    list-access, list-a, list, l-ac, lac, liac
    edit-access, edit-a, edit, e-ac, edac
    set-access, set-acc, set, seta

  Tab-completion in CLI mode also works for command names,
  (global) long options and files.
  
  Command names may also be used in links to the "acltool"
  binary like "ln -s acltool lac" and then be used as shortcuts
  to the commands.


FILE TYPES
  f = Regular file
  d = Directory
  b = Block device
  c = Character device
  l = Symbolic link
  p = Pipe (FIFO)
  s = Socket
  w = Whiteout (FreeBSD only)


ACL PRINT STYLES
  default         acltool-style
  standard        FreeBSD-style
  verbose	  More verbose version
  brief		  One-line version
  csv		  CSV-style one-line version
  solaris	  Solaris-style
  primos	  Prime/PRIMOS-style
  samba		  Samba-style
  icacls	  Windows ICACLS-style


MORE INFORMATION

  See the information in the "doc" subdirectory.


EXAMPLES

  lac-access -r -t sf .
    Recursively display Access list for sockets and normal files

  edit-access -r user:peter86:rwx:f:allow dir
    Recursively set the ACE permission "rwx" on all objects matching "user:peter86" with flags "f" and type "allow"

  edit-access -r peter86:-rwx:f:allow dir
    Recursively remove permissions "rwx" from all existing peter86:*:f:allow ACEs

  edit-access -r peter86:+rwx:f:allow?d dir
    Recursively add permissions "rwx" to all existing peter86:*:f:allow ACEs set on directories
    
  sort-access -m dir
    Sort and merge the ACL entries for dir

  rename-access -r employees:students,g:guests:noobs /export/homes
    Recursively replace all ACL entries for groups "employees" with "students" and guests with noobs

  edit-access /parst38:rwx/user:peter86:rwx:f:allow/ dir  
    Replace all parst38-allow entries where rwx permissions is
    set with 'user:peter86:rwx:f:allow'


MORE ADVANCED USAGE

The "edit-access" subcommand takes two additions command line switches:

  -e <change-list>       Add a semicolon-separated "extended program" to the change request list
  -f <filename>		 Add a "extended program" (semicolon or newline-separated) from a file

If either is specified then no "simple" change-request is read from the command line.

The "extended program" is (very) loosely based on "sed" and consists of a semicolon
(or newlines when reading from a file) separated list of actions having a format like this:

  [{<filetypes>}] [<range>] [/<filter>/] <cmd>[<modifiers>] [<arguments>]

Filetypes are used to select which file types to operate on.

Ranges are used to limit which entries of an ACL to operate on.

Filters are used to further select which ACL entries to operate on. Regular expressions
may be used if enabled via "-R | --regex".

Modifiers are used to modify the functionality of a command.

For example:

  {fd}0-3/peter86/p;0i peter86:rwx
  
The following commands are available:

  p         Print entries
  d         Delete entries
  i <ace>   Insert entries
  a <ace>   Append entries (after current position)
  s <ace>   Set entries


EXAMPLES

  edit-access -e '2d' dir
    Delete entry #2

  edit-access -e '2i user:peter86:rwx:f:allow' dir
    Insert "user:peter86:rwx:f:allow" at position 2

  edit-access -e '$a user:peter86:rwx:f:allow' dir
    Add entry "user:peter86:rwx:f:allow" last in the ACL

  edit-access -e '0p;1,2,3p;0-$p' dir
    Print first entry, then entries 1,2&3, and then all entries in the ACL

  edit-access -r -e '{d}/peter86:+rwx/s peter86:rwxp:fd;0-$p' dir
    Recursively replace all "peter86:*::allow" entries where atleast rwx is set
    with "peter86:rwxp:fd" on directories, and then print the resulting ACL.
